# -*- coding: utf-8 -*-
"""Final INF2178A2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cPG-jNn4VJzCG7YpiaFgpImVvYL7qO-L

# Preparing Dataset
"""

# Commented out IPython magic to ensure Python compatibility.
# INF2178 Assignment 2

# Library imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import statsmodels.api as sm
from statsmodels.formula.api import ols
# %pip install bioinfokit
from bioinfokit.analys import stat

# Read input file
file_path = '/content/INF2178_A2_data.xlsx'
df = pd.read_excel(file_path)

# Create an output file
import matplotlib.backends.backend_pdf as pdf_backend
pdf_filename = 'output_report.pdf'
pdf_pages = pdf_backend.PdfPages(pdf_filename)

# Display information on dataset
print(df.info())

# Display initial rows of dataset
print(df.head(10))

nan_count = df.isna().sum()
print(nan_count)

# calculate the mean of each column
mean = df.mean()

# fill NaN values with the mean of each column
df.fillna(mean, inplace=True)
print(df)

# Create continuous variables on capacity numbers percent of total space
df['IGSPACE_PERCENT'] = (df['IGSPACE'] / df['TOTSPACE']) * 100
df['TGSPACE_PERCENT'] = (df['TGSPACE'] / df['TOTSPACE']) * 100
df['PGSPACE_PERCENT'] = (df['PGSPACE'] / df['TOTSPACE']) * 100
df['KGSPACE_PERCENT'] = (df['KGSPACE'] / df['TOTSPACE']) * 100
df['SGSPACE_PERCENT'] = (df['SGSPACE'] / df['TOTSPACE']) * 100

# Display the updated DataFrame
print(df[['LOC_NAME', 'IGSPACE_PERCENT', 'TGSPACE_PERCENT', 'PGSPACE_PERCENT', 'KGSPACE_PERCENT', 'SGSPACE_PERCENT']])

"""# Summary Statistics"""

# Function for summary statistics
def get_summary_statistics(dataset, label='Dataset'):

    mean = np.round(np.mean(dataset), 2)
    median = np.round(np.median(dataset), 2)
    min_value = np.round(dataset.min(), 2)
    max_value = np.round(dataset.max(), 2)
    quartile_1 = np.round(dataset.quantile(0.25), 2)
    quartile_3 = np.round(dataset.quantile(0.75), 2)

    # Interquartile range
    iqr = np.round(quartile_3 - quartile_1, 2)

    print(f'{label} Summary Statistics:')
    print('Min: %s' % min_value)
    print('Mean: %s' % mean)
    print('Max: %s' % max_value)
    print('25th percentile: %s' % quartile_1)
    print('Median: %s' % median)
    print('75th percentile: %s' % quartile_3)
    print('Interquartile range (IQR): %s' % iqr)
    print('\n\n')

# Select relevant data columns
selected_data = df[['IGSPACE', 'TGSPACE', 'PGSPACE', 'KGSPACE', 'SGSPACE', "TOTSPACE"]].copy()

# Fill missing values with the mean of the column
selected_data.fillna(selected_data.mean(numeric_only=True), inplace=True)

# Display summary statistics for relevant columns
get_summary_statistics(selected_data['IGSPACE'], label='IGSPACE')
get_summary_statistics(selected_data['TGSPACE'], label='TGSPACE')
get_summary_statistics(selected_data['PGSPACE'], label='PGSPACE')
get_summary_statistics(selected_data['KGSPACE'], label='KGSPACE')
get_summary_statistics(selected_data['SGSPACE'], label='SGSPACE')
get_summary_statistics(selected_data['TOTSPACE'], label='TOTSPACE')

"""# One-Way ANOVA"""

# Reshape the dataframe suitable for statsmodels package
df_melt = pd.melt(df.reset_index(), id_vars=['_id'], value_vars=['IGSPACE', 'TGSPACE', 'PGSPACE', 'KGSPACE', 'SGSPACE'])

# Replace column names
df_melt.columns = ['_id', 'childcarespaces', 'value']

# Generate a boxplot to see the data distribution by childcare spaces
ax = sns.boxplot(x='childcarespaces', y='value', data=df_melt, color='#99c2a2')
ax = sns.swarmplot(x='childcarespaces', y='value', data=df_melt, color='#7d0013')
plt.show()

# Ordinary Least Squares (OLS) model
model = ols('value ~ C(childcarespaces)', data=df_melt).fit()
anova_table = sm.stats.anova_lm(model, typ=2)
anova_table

# ANOVA table
res = stat()
res.anova_stat(df=df_melt, res_var='value', anova_model='value ~ C(childcarespaces)')
res.anova_summary

# Post hoc test using Tukey's HSD
from statsmodels.stats.multicomp import pairwise_tukeyhsd

tukey = pairwise_tukeyhsd(endog=df_melt['value'], groups=df_melt['childcarespaces'], alpha=0.05)
print(tukey.summary())

#checking model diagnostics
import statsmodels.api as sm
import matplotlib.pyplot as plt

# assumption 1: res.anova_std_residuals are standardized residuals obtained from ANOVA
sm.qqplot(res.anova_std_residuals, line='45')
plt.xlabel("Theoretical Quantiles")
plt.ylabel("Standardized Residuals")
plt.show()

# histogram
plt.hist(res.anova_model_out.resid, bins='auto', histtype='bar', ec='k')
plt.xlabel("Total Space")
plt.ylabel('Frequency')
plt.show()

#assumption 1: residuals are normally distributed: Shapiro Wilk test
w, pvalue = stats.shapiro(model.resid)
print(w,pvalue)

# Assumption 2: Variances are homogeneous (Bartlett's test)
# List of child care spaces columns
child_care_columns = ['IGSPACE', 'TGSPACE', 'PGSPACE', 'KGSPACE', 'SGSPACE', 'TOTSPACE']

# Perform Bartlett's test for all child care spaces columns
bartlett_results = []

for col in child_care_columns:
    bartlett_stat, pvalue_bartlett = stats.bartlett(*[group[col] for _, group in df.groupby('AUSPICE')])
    bartlett_results.append((col, bartlett_stat, pvalue_bartlett))

# Print Bartlett's test results for each child care spaces column
for col, bartlett_stat, pvalue_bartlett in bartlett_results:
    print(f"Bartlett's Test Statistic for {col}: {bartlett_stat}")
    print(f"P-value for {col}: {pvalue_bartlett}")
    print()

res = stat()
res.bartlett(df=df_melt, res_var='value', xfac_var='childcarespaces')
res.bartlett_summary

#assumption 2: variances are homogenous: Levene's test when the sample is not normally distributed
res.levene(df=df_melt, res_var='value', xfac_var='childcarespaces')
res.levene_summary

"""# Two-Way ANOVA"""

df_melt = pd.melt(df.reset_index(), id_vars=['_id', 'AUSPICE'], value_vars=['TOTSPACE'])

# replace column names
df_melt.columns = ['index', 'auspice', 'childcarespaces', 'value']

# boxplot to see the data distribution by auspices
ax = sns.boxplot(x='auspice', y='value', data=df_melt, color='#99c2a2')
ax = sns.swarmplot(x='auspice', y='value', data=df_melt, color='#7d0013')
plt.show()

# Ordinary Least Squares (OLS) model
model = ols('value ~ C(auspice)', data=df_melt).fit()
anova_table = sm.stats.anova_lm(model, typ=2)
anova_table

# ANOVA table
res = stat()
res.anova_stat(df=df_melt, res_var='value', anova_model='value ~ C(auspice)')
res.anova_summary

#post hoc test using Scheffe's test or Tukey's HSD
res = stat()
res.tukey_hsd(df=df_melt, res_var='value', xfac_var='auspice', anova_model='value ~ C(auspice)')
res.tukey_summary

#checking model diagnostics
import statsmodels.api as sm
import matplotlib.pyplot as plt

# assumption 1: res.anova_std_residuals are standardized residuals obtained from ANOVA (check above)
sm.qqplot(res.anova_std_residuals, line='45')
plt.xlabel("Theoretical Quantiles")
plt.ylabel("Standardized Residuals")
plt.show()

# histogram
plt.hist(res.anova_model_out.resid, bins='auto', histtype='bar', ec='k')
plt.xlabel("Residuals")
plt.ylabel('Frequency')
plt.show()

#assumption 1: residuals are normally distributed: Shapiro Wilk test
w, pvalue = stats.shapiro(model.resid)
print(w,pvalue)

# Assumption 2: Variances are homogeneous (Bartlett's test)
# List of child care spaces columns
child_care_columns = ['IGSPACE', 'TGSPACE', 'PGSPACE', 'KGSPACE', 'SGSPACE', 'TOTSPACE']

# Bartlett's test for all child care spaces columns
bartlett_results = []

for col in child_care_columns:
    bartlett_stat, pvalue_bartlett = stats.bartlett(*[group[col] for _, group in df.groupby('AUSPICE')])
    bartlett_results.append((col, bartlett_stat, pvalue_bartlett))

# Bartlett's test results for each child care spaces column
for col, bartlett_stat, pvalue_bartlett in bartlett_results:
    print(f"Bartlett's Test Statistic for {col}: {bartlett_stat}")
    print(f"P-value for {col}: {pvalue_bartlett}")
    print()

res = stat()
res.bartlett(df=df_melt, res_var='value', xfac_var='auspice')
res.bartlett_summary

#assumption 2: variances are homogenous: Levene's test when the sample is not normally distributed
res.levene(df=df_melt, res_var='value', xfac_var='auspice')
res.levene_summary

#2 way anovas
file_path = '/content/INF2178_A2_data.xlsx'
df = pd.read_excel(file_path)

# melting the DataFrame
df_melt = pd.melt(df.reset_index(), id_vars=['_id', 'AUSPICE'], value_vars=['TOTSPACE'])
# Display the first few rows of the melted DataFrame
print(df_melt)

plt.figure(figsize=(12, 8))
sns.boxplot(x="AUSPICE", y="value", hue="variable", data=df_melt, palette="Set3")

# Adjust the plot
plt.xlabel("Auspice")
plt.ylabel("Value")
plt.title("Boxplot of Values for Total Space by Auspice")

plt.legend(title="Count", loc="upper left", bbox_to_anchor=(1, 1))
plt.show()

print(model.summary())

print(anova_table)

df_melt.dtypes

formula = 'value ~ C(AUSPICE)'
res = stat()
res.anova_stat(df=df_melt, res_var='value', anova_model=formula)
anova_summary = res.anova_summary

# Display ANOVA results
print(anova_summary)

from statsmodels.graphics.factorplots import interaction_plot
import matplotlib.pyplot as plt

unique_variables = df_melt['variable'].unique()
colors = sns.color_palette("husl", n_colors=len(unique_variables))
fig = interaction_plot(x=df_melt['AUSPICE'], trace=df_melt['variable'], response=df_melt['value'], colors=colors)
plt.show()

res.tukey_hsd(df=df_melt, res_var='value', xfac_var='AUSPICE', anova_model='value ~ C(AUSPICE)')
res.tukey_summary

tukey_results = pairwise_tukeyhsd(df_melt['value'], df_melt['AUSPICE'])
res.tukey_summary

res.tukey_hsd(df=df_melt, res_var='value', xfac_var='AUSPICE', anova_model='value ~ C(AUSPICE)')
res.tukey_summary.head()

import numpy as np

df['AUSPICE_ward'] = df['AUSPICE'] + '_' + df['ward'].astype(str)

# Display the updated DataFrame
print(df.head)